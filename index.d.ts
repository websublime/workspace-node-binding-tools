/* auto-generated by NAPI-RS */
/* eslint-disable */
export const enum Bump {
  Major = 'Major',
  Minor = 'Minor',
  Patch = 'Patch',
  Snapshot = 'Snapshot'
}

export interface BumpOptions {
  packages: Array<string>
  releaseAs: Bump
  fetchAll?: boolean
  fetchTags?: boolean
  cwd?: string
}

export interface BumpPackage {
  from: string
  to: string
  releaseAs: Bump
  conventional: ConventionalPackage
}

export interface Commit {
  hash: string
  authorName: string
  authorEmail: string
  authorDate: string
  message: string
}

export interface ConventionalPackage {
  packageInfo: PackageInfo
  conventionalConfig: any
  conventionalCommits: any
  changelogOutput: string
}

export interface ConventionalPackageOptions {
  version?: string
  title?: string
}

export declare function detectPackageManager(root: string): PackageManager | null

export declare function getAllFilesChangedSinceBranch(packageInfo: Array<PackageInfo>, branch: string, cwd?: string | undefined | null): Array<string>

export declare function getBumps(options: BumpOptions): Array<BumpPackage>

export declare function getChangedPackages(sha?: string | undefined | null, cwd?: string | undefined | null): Array<PackageInfo>

export declare function getCommitsSince(cwd?: string | undefined | null, since?: string | undefined | null, relative?: string | undefined | null): Array<Commit>

export declare function getConventionalForPackage(packageInfo: PackageInfo, noFetchAll?: boolean | undefined | null, cwd?: string | undefined | null, conventionalOptions?: ConventionalPackageOptions | undefined | null): ConventionalPackage

export declare function getDefinedPackageManager(root?: string | undefined | null): PackageManager | null

export declare function getDivergedCommit(refer: string, cwd?: string | undefined | null): string | null

export declare function getLastKnownPublishTagInfoForAllPackages(packageInfo: Array<PackageInfo>, cwd?: string | undefined | null): Array<PublishTagInfo | undefined | null>

export declare function getLastKnownPublishTagInfoForPackage(packageInfo: PackageInfo, cwd?: string | undefined | null): PublishTagInfo | null

export declare function getPackages(cwd?: string | undefined | null): Array<PackageInfo>

export declare function getProjectRootPath(root?: string | undefined | null): string | null

export declare function getRemoteOrLocalTags(cwd?: string | undefined | null, local?: boolean | undefined | null): Array<RemoteTags>

export declare function gitAllFilesChangedSinceSha(sha: string, cwd?: string | undefined | null): Array<string>

export declare function gitCommit(message: string, body?: string | undefined | null, footer?: string | undefined | null, cwd?: string | undefined | null): boolean

export declare function gitCommitBranchName(sha: string, cwd?: string | undefined | null): string | null

export declare function gitCurrentBranch(cwd?: string | undefined | null): string | null

export declare function gitCurrentSha(cwd?: string | undefined | null): string

export declare function gitFetchAll(cwd?: string | undefined | null, fetchTags?: boolean | undefined | null): boolean

export declare function gitFirstSha(cwd?: string | undefined | null, branch?: string | undefined | null): string | null

export declare function gitPreviousSha(cwd?: string | undefined | null): string

export declare function gitPush(cwd?: string | undefined | null, followTags?: boolean | undefined | null): boolean

export declare function gitTag(tag: string, message?: string | undefined | null, cwd?: string | undefined | null): boolean

export declare function isWorkdirUnclean(cwd?: string | undefined | null): boolean

export interface PackageInfo {
  name: string
  private: boolean
  packageJsonPath: string
  packagePath: string
  packageRelativePath: string
  pkgJson: any
  root: boolean
  version: string
  url: string
  repositoryInfo?: PackageRepositoryInfo
  changedFiles: Array<string>
}

export const enum PackageManager {
  Npm = 'Npm',
  Yarn = 'Yarn',
  Pnpm = 'Pnpm',
  Bun = 'Bun'
}

export interface PackageRepositoryInfo {
  domain: string
  orga: string
  project: string
}

export interface PublishTagInfo {
  hash: string
  tag: string
  package: string
}

export interface RemoteTags {
  hash: string
  tag: string
}

