/* auto-generated by NAPI-RS */
/* eslint-disable */
/**
 * Add change
 *
 * # Examples
 *
 * ```
 * const { addChange } = require('workspace-node-tools');
 * addChange(Change{}, process.cwd());
 * ```
 *
 * @param change - The change to add
 * @param cwd - The root path to start searching from
 */
export declare function addChange(change: Change, cwd?: string | undefined | null): boolean

/**
 * Apply bumps to a package. This will update the package.json version and changelog
 * files.
 *
 * # Examples
 *
 * ```
 * const { applyBumps } = require('workspace-node-tools');
 * applyBumps(BumpOptions{});
 * ```
 *
 * @param options - The bump options
 */
export declare function applyBumps(options: BumpOptions): Array<BumpPackage>

export enum Bump {
  Major = 'Major',
  Minor = 'Minor',
  Patch = 'Patch',
  Snapshot = 'Snapshot',
}

export interface BumpOptions {
  packages: Array<string>
  since?: string
  releaseAs: Bump
  fetchAll?: boolean
  fetchTags?: boolean
  syncDeps?: boolean
  push?: boolean
  cwd?: string
}

export interface BumpPackage {
  from: string
  to: string
  releaseAs: Bump
  conventional: ConventionalPackage
}

export interface Change {
  package: string
  releaseAs: Bump
  deploy: Array<string>
}

export type ChangesData = {
  [key: string]: Array<Change>
}

/**
 * Change exist
 *
 * # Examples
 *
 * ```
 * const { changeExist } = require('workspace-node-tools');
 * const exist = changeExist("branch-name", process.cwd());
 * ```
 *
 * @param branch_name - The branch name to check
 * @param cwd - The root path to start searching from
 */
export declare function changeExist(branchName: string, cwd?: string | undefined | null): boolean

export interface Changes {
  changes: ChangesData
}

export interface ChangesFileData {
  message?: string
  gitUserName?: string
  gitUserEmail?: string
  changes: ChangesData
}

/**
 * Changes file exist
 *
 * # Examples
 *
 * ```
 * const { changesFileExist } = require('workspace-node-tools');
 * const exist = changesFileExist(process.cwd());
 * ```
 *
 * @param cwd - The root path to start searching from
 */
export declare function changesFileExist(cwd?: string | undefined | null): boolean

export interface ChangesOptions {
  message?: string
  gitUserName?: string
  gitUserEmail?: string
}

export interface Commit {
  hash: string
  authorName: string
  authorEmail: string
  authorDate: string
  message: string
}

export interface ConventionalPackage {
  packageInfo: PackageInfo
  conventionalConfig: any
  conventionalCommits: any
  changelogOutput: string
}

export interface ConventionalPackageOptions {
  version?: string
  title?: string
}

/**
 * Detect the package manager
 *
 * # Examples
 *
 * ```
 * const { detectPackageManager } = require('workspace-node-tools');
 * const packageManager = detectPackageManager(process.cwd());
 * ```
 *
 * @param root - The root path to start searching from
 */
export declare function detectPackageManager(root: string): PackageManager | null

/**
 * Get all files changed since a branch
 *
 * # Examples
 *
 * ```
 * const { getAllFilesChangedSinceBranch } = require('workspace-node-tools');
 * const files = getAllFilesChangedSinceBranch([PackageInfo{}], "main", process.cwd());
 * ```
 *
 * @param package_info - The list of package info
 * @param branch - The branch to compare against
 * @param cwd - The root path to start searching from
 */
export declare function getAllFilesChangedSinceBranch(
  packageInfo: Array<PackageInfo>,
  branch: string,
  cwd?: string | undefined | null,
): Array<string>

/**
 * Get bumps
 *
 * # Examples
 *
 * ```
 * const { getBumps } = require('workspace-node-tools');
 * const bumps = getBumps(BumpOptions{});
 * ```
 *
 * @param options - The bump options
 */
export declare function getBumps(options: BumpOptions): Array<BumpPackage>

/**
 * Get change
 *
 * # Examples
 *
 * ```
 * const { getChange } = require('workspace-node-tools');
 * const changes = getChange("branch-name", process.cwd());
 * ```
 *
 * @param branch_name - The branch name to get
 * @param cwd - The root path to start searching from
 */
export declare function getChange(branchName: string, cwd?: string | undefined | null): Array<Change>

/**
 * Get changed packages
 *
 * # Examples
 *
 * ```
 * const { getChangedPackages } = require('workspace-node-tools');
 * const changedPackages = getChangedPackages("main", process.cwd());
 * ```
 *
 * @param sha - The commit sha to compare against (normally main branch)
 * @param cwd - The root path to start searching from
 */
export declare function getChangedPackages(
  sha?: string | undefined | null,
  cwd?: string | undefined | null,
): Array<PackageInfo>

/**
 * Get changes
 *
 * # Examples
 *
 * ```
 * const { getChanges } = require('workspace-node-tools');
 * const changes = getChanges(process.cwd());
 * ```
 *
 * @param cwd - The root path to start searching from
 */
export declare function getChanges(cwd?: string | undefined | null): Changes

/**
 * Get commits since a commit id
 *
 * # Examples
 *
 * ```
 * const { getCommitsSince } = require('workspace-node-tools');
 * const commits = getCommitsSince(process.cwd(), "main", "packages/package-a");
 * ```
 *
 * @param cwd - The root path to start searching from
 * @param since - The commit id (accepts branch, tag)
 * @param relative - The relative path to search from
 */
export declare function getCommitsSince(
  cwd?: string | undefined | null,
  since?: string | undefined | null,
  relative?: string | undefined | null,
): Array<Commit>

/**
 * Get the conventional for a package
 *
 * # Examples
 *
 * ```
 * const { getConventionalForPackage } = require('workspace-node-tools');
 * const conventional = getConventionalForPackage(PackageInfo{}, false, process.cwd(), ConventionalPackageOptions{});
 * ```
 *
 * @param package_info - The package info
 * @param no_fetch_all - Do not fetch all commits
 * @param cwd - The root path to start searching from
 * @param conventional_options - The conventional options
 */
export declare function getConventionalForPackage(
  packageInfo: PackageInfo,
  noFetchAll?: boolean | undefined | null,
  cwd?: string | undefined | null,
  conventionalOptions?: ConventionalPackageOptions | undefined | null,
): ConventionalPackage

/**
 * Get the defined package manager
 *
 * # Examples
 *
 * ```
 * const { getDefinedPackageManager } = require('workspace-node-tools');
 * const packageManager = getDefinedPackageManager(process.cwd());
 * ```
 *
 * @param root - The root path to start searching from
 */
export declare function getDefinedPackageManager(root?: string | undefined | null): PackageManager | null

/**
 * Get the diverged commit
 *
 * # Examples
 *
 * ```
 * const { getDivergedCommit } = require('workspace-node-tools');
 * const diverged = getDivergedCommit("main", process.cwd());
 * ```
 *
 * @param refer - The branch to compare against
 * @param cwd - The root path to start searching from
 */
export declare function getDivergedCommit(refer: string, cwd?: string | undefined | null): string | null

/**
 * Get the last known publish tag info for all packages
 *
 * # Examples
 *
 * ```
 * const { getLastKnownPublishTagInfoForAllPackages } = require('workspace-node-tools');
 * const tagInfo = getLastKnownPublishTagInfoForAllPackages([PackageInfo{}], process.cwd());
 * ```
 *
 * @param package_info - The list of package info
 * @param cwd - The root path to start searching from
 */
export declare function getLastKnownPublishTagInfoForAllPackages(
  packageInfo: Array<PackageInfo>,
  cwd?: string | undefined | null,
): Array<PublishTagInfo | undefined | null>

/**
 * Get the last known publish tag info for a package
 *
 * # Examples
 *
 * ```
 * const { getLastKnownPublishTagInfoForPackage } = require('workspace-node-tools');
 * const tagInfo = getLastKnownPublishTagInfoForPackage(PackageInfo{}, process.cwd());
 * ```
 *
 * @param package_info - The package info
 * @param cwd - The root path to start searching from
 */
export declare function getLastKnownPublishTagInfoForPackage(
  packageInfo: PackageInfo,
  cwd?: string | undefined | null,
): PublishTagInfo | null

/**
 * Get packages available in the monorepo
 *
 * # Examples
 *
 * ```
 * const { getPackages } = require('workspace-node-tools');
 * const packages = getPackages(process.cwd());
 * ```
 *
 * @param cwd - The root path to start searching from
 */
export declare function getPackages(cwd?: string | undefined | null): Array<PackageInfo>

/**
 * Get the project root path
 *
 * # Examples
 *
 * ```
 * const { getProjectRootPath } = require('workspace-node-tools');
 * const project_root = getProjectRootPath(process.cwd());
 * ```
 *
 * @param root - The root path to start searching from
 */
export declare function getProjectRootPath(root?: string | undefined | null): string | null

/**
 * Get remote or local tags
 *
 * # Examples
 *
 * ```
 * const { getRemoteOrLocalTags } = require('workspace-node-tools');
 * const tags = getRemoteOrLocalTags(process.cwd(), true);
 * ```
 *
 * @param cwd - The root path to start searching from
 * @param local - Fetch local tags
 */
export declare function getRemoteOrLocalTags(
  cwd?: string | undefined | null,
  local?: boolean | undefined | null,
): Array<RemoteTags>

/**
 * Git add file to staging
 *
 * # Examples
 *
 * ```
 * const { gitAdd } = require('workspace-node-tools');
 * gitAdd("package.json", process.cwd());
 * ```
 *
 * @param file - The file to add to staging
 * @param cwd - The root path to start searching from
 */
export declare function gitAdd(file: string, cwd?: string | undefined | null): boolean

/**
 * Git add all files to staging
 *
 * # Examples
 *
 * ```
 * const { gitAddAll } = require('workspace-node-tools');
 * gitAddAll(process.cwd());
 * ```
 *
 * @param cwd - The root path to start searching from
 */
export declare function gitAddAll(cwd?: string | undefined | null): boolean

/**
 * Get all files changed since a commit id
 *
 * # Examples
 *
 * ```
 * const { gitAllFilesChangedSinceSha } = require('workspace-node-tools');
 * const files = gitAllFilesChangedSinceSha("sha", process.cwd());
 * ```
 *
 * @param sha - The commit id (accepts branch, tag)
 * @param cwd - The root path to start searching from
 */
export declare function gitAllFilesChangedSinceSha(sha: string, cwd?: string | undefined | null): Array<string>

/**
 * Commit changes to git
 *
 * # Examples
 *
 * ```
 * const { gitCommit } = require('workspace-node-tools');
 * gitCommit("feat: add new feature", "body", "footer", process.cwd());
 * ```
 *
 * @param message - The commit message
 * @param body - The commit body
 * @param footer - The commit footer
 * @param cwd - The root path to start searching from
 */
export declare function gitCommit(
  message: string,
  body?: string | undefined | null,
  footer?: string | undefined | null,
  cwd?: string | undefined | null,
): boolean

/**
 * Get the branch name from a commit id
 *
 * # Examples
 *
 * ```
 * const { gitCommitBranchName } = require('workspace-node-tools');
 * const branch = gitCommitBranchName("sha", process.cwd());
 * ```
 *
 * @param sha - The commit id
 * @param cwd - The root path to start searching from
 */
export declare function gitCommitBranchName(sha: string, cwd?: string | undefined | null): string | null

/**
 * Git config user name and email
 *
 * # Examples
 *
 * ```
 * const { gitConfig } = require('workspace-node-tools');
 * gitConfig("John Doe", "john.doe@email.com", process.cwd());
 * ```
 *
 * @param name - The user name to set
 * @param email - The user email to set
 * @param cwd - The root path to start searching from
 */
export declare function gitConfig(name: string, email: string, cwd?: string | undefined | null): boolean

/**
 * Get the current branch
 *
 * # Examples
 *
 * ```
 * const { gitCurrentBranch } = require('workspace-node-tools');
 * const branch = gitCurrentBranch(process.cwd());
 * ```
 *
 * @param cwd - The root path to start searching from
 */
export declare function gitCurrentBranch(cwd?: string | undefined | null): string | null

/**
 * Get the current commit id
 *
 * # Examples
 *
 * ```
 * const { gitCurrentSha } = require('workspace-node-tools');
 * const sha = gitCurrentSha(process.cwd());
 * ```
 *
 * @param cwd - The root path to start searching from
 */
export declare function gitCurrentSha(cwd?: string | undefined | null): string

/**
 * Fetch all git changes
 *
 * # Examples
 *
 * ```
 * const { gitFetchAll } = require('workspace-node-tools');
 * gitFetchAll(process.cwd(), true);
 * ```
 *
 * @param cwd - The root path to start searching from
 * @param fetch_tags - Fetch tags from remote
 */
export declare function gitFetchAll(cwd?: string | undefined | null, fetchTags?: boolean | undefined | null): boolean

/**
 * Get the first commit id
 *
 * # Examples
 *
 * ```
 * const { gitFirstSha } = require('workspace-node-tools');
 * const sha = gitFirstSha(process.cwd());
 * ```
 *
 * @param cwd - The root path to start searching from
 */
export declare function gitFirstSha(cwd?: string | undefined | null, branch?: string | undefined | null): string | null

/**
 * Get the previous commit id
 *
 * # Examples
 *
 * ```
 * const { gitPreviousSha } = require('workspace-node-tools');
 * const sha = gitPreviousSha(process.cwd());
 * ```
 *
 * @param cwd - The root path to start searching from
 */
export declare function gitPreviousSha(cwd?: string | undefined | null): string | null

/**
 * Push changes to git
 *
 * # Examples
 *
 * ```
 * const { gitPush } = require('workspace-node-tools');
 * gitPush(process.cwd(), true);
 * ```
 *
 * @param cwd - The root path to start searching from
 * @param follow_tags - Follow tags
 */
export declare function gitPush(cwd?: string | undefined | null, followTags?: boolean | undefined | null): boolean

/**
 * Tag a git commit
 *
 * # Examples
 *
 * ```
 * const { gitTag } = require('workspace-node-tools');
 * gitTag("v1.0.0", "message", process.cwd());
 * ```
 *
 * @param tag - The tag to apply
 * @param message - The tag message
 * @param cwd - The root path to start searching from
 */
export declare function gitTag(
  tag: string,
  message?: string | undefined | null,
  cwd?: string | undefined | null,
): boolean

/**
 * Init changes
 *
 * # Examples
 *
 * ```
 * const { initChanges } = require('workspace-node-tools');
 * const changes = initChanges(process.cwd(), ChangesOptions{});
 * ```
 *
 * @param cwd - The root path to start searching from
 */
export declare function initChanges(
  cwd?: string | undefined | null,
  changeOptions?: ChangesOptions | undefined | null,
): ChangesFileData

/**
 * Check if the workdir is unclean
 *
 * # Examples
 *
 * ```
 * const { isWorkdirUnclean } = require('workspace-node-tools');
 * const unclean = isWorkdirUnclean(process.cwd());
 * ```
 *
 * @param cwd - The root path to start searching from
 */
export declare function isWorkdirUnclean(cwd?: string | undefined | null): boolean

export interface PackageInfo {
  name: string
  private: boolean
  packageJsonPath: string
  packagePath: string
  packageRelativePath: string
  pkgJson: any
  root: boolean
  version: string
  url: string
  repositoryInfo?: PackageRepositoryInfo
  changedFiles: Array<string>
}

export enum PackageManager {
  Npm = 'Npm',
  Yarn = 'Yarn',
  Pnpm = 'Pnpm',
  Bun = 'Bun',
}

export interface PackageRepositoryInfo {
  domain: string
  orga: string
  project: string
}

export interface PublishTagInfo {
  hash: string
  tag: string
  package: string
}

export interface RemoteTags {
  hash: string
  tag: string
}

/**
 * Remove change
 *
 * # Examples
 *
 * ```
 * const { removeChange } = require('workspace-node-tools');
 * removeChange("branch-name", process.cwd());
 * ```
 *
 * @param branch_name - The branch name to remove
 * @param cwd - The root path to start searching from
 */
export declare function removeChange(branchName: string, cwd?: string | undefined | null): boolean
